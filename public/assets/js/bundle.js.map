{"version":3,"sources":["webpack:///webpack/bootstrap b24e6d13b8f5382aca21","webpack:///./integrations/index.js","webpack:///./integrations/amCharts.js","webpack:///./integrations/chartJs.js","webpack:///./integrations/fusionCharts.js","webpack:///./integrations/highcharts.js"],"names":["chartWrappers","selectedClass","controls","document","getElementById","mapChartsToWrapper","Map","set","onAfterInit","isListItem","getElementsByTagName","allListItems","Array","from","forEach","li","Handsontable","dom","hasClass","chartName","children","textContent","ActiveChartWrapper","get","push","onBeforeChange","changes","change","chartWrapper","row","column","currentValue","setDataAtCell","updateChartData","onAfterCreateColumn","index","addNewTeam","onAfterCreateRow","addNewGame","onAfterRemoveColumn","removeColumn","onAfterRemoveRow","removeRow","hot","data","colHeaders","rowHeaders","contextMenu","rowHeaderWidth","className","type","width","maxRows","maxCols","stretchH","allowInvalid","afterInit","beforeChange","afterCreateCol","afterCreateRow","afterRemoveCol","afterRemoveRow","addEventListener","event","isButton","target","nodeName","toLowerCase","buttonValue","value","nextRow","countRows","getSettings","alter","nextColumn","countCols","AmChartsWrapper","amChartsRootId","hotInstance","name","chart","AmCharts","makeChart","getChartOptions","objectGraph","fillAlphas","lineAlpha","balloonText","valueField","graphs","indexColumn","dataProvider","validateNow","objectTeam","team","indexRow","splice","getDataAtCell","theme","zipTeamWithGameData","valueAxes","gridColor","gridAlpha","dashLength","gridAboveGraphs","startDuration","updateChartGraphs","chartCursor","categoryBalloonEnabled","cursorAlpha","zoomable","categoryField","categoryAxis","gridPosition","tickPosition","tickLength","export","enabled","colsArray","obj","getDataAtCol","map","item","ChartJsWrapper","chartJsRootId","Chart","backgroundColors","label","backgroundColor","getDataAtRow","objectGame","datasets","update","labels","indexDataset","length","indexcolumn","updateChartColumns","zipTeamWithRowData","options","legend","display","title","fontSize","fontStyle","text","tooltips","titleFontSize","bodyFontSize","scales","yAxes","ticks","beginAtZero","xAxes","rowsArray","categoriesArray","FusionChartsWrapper","fusionChartsRootId","FusionCharts","render","seriesname","args","dataSource","dataset","setJSONData","categories","category","id","renderAt","height","dataFormat","caption","xAxisName","yAxisName","objectResult","HighchartsWrapper","highChartsRootId","Highcharts","addSeries","xAxis","indexSeries","series","remove"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b24e6d13b8f5382aca21","import HighchartsWrapper from './highcharts';\nimport AmChartsWrapper from './amCharts';\nimport ChartJsWrapper from './chartJs';\nimport FusionChartsWrapper from './fusionCharts';\n\nconst chartWrappers = [];\nconst selectedClass = 'selected';\nconst controls = document.getElementById('controls');\nconst mapChartsToWrapper = new Map();\n\nmapChartsToWrapper.set('Highcharts', HighchartsWrapper);\nmapChartsToWrapper.set('amCharts', AmChartsWrapper);\nmapChartsToWrapper.set('Chart.js', ChartJsWrapper);\nmapChartsToWrapper.set('FusionCharts', FusionChartsWrapper);\n\nfunction onAfterInit() {\n  const isListItem = document.getElementsByTagName('li');\n  const allListItems = Array.from(isListItem);\n\n  allListItems.forEach((li) => {\n    if (Handsontable.dom.hasClass(li, selectedClass)) {\n      const chartName = li.children[0].textContent;\n      const ActiveChartWrapper = mapChartsToWrapper.get(chartName);\n\n      chartWrappers.push(new ActiveChartWrapper('chart', this));\n    }\n  });\n}\n\nfunction onBeforeChange(changes) {\n  changes.forEach((change) => {\n    chartWrappers.forEach((chartWrapper) => {\n      const [row, column] = change;\n      const currentValue = change[3] === '' ? 0 : change[3];\n\n      if (change[3] === '') {\n        this.setDataAtCell(row, column, 0, 'onBeforeChange');\n      }\n\n      chartWrapper.updateChartData(row, column, currentValue, this);\n    });\n  });\n}\n\nfunction onAfterCreateColumn(index) {\n  chartWrappers.forEach((chartWrapper) => {\n    chartWrapper.addNewTeam(this, index);\n  });\n}\n\nfunction onAfterCreateRow(index) {\n  chartWrappers.forEach((chartWrapper) => {\n    chartWrapper.addNewGame(this, index);\n  });\n}\n\nfunction onAfterRemoveColumn(index) {\n  chartWrappers.forEach((chartWrapper) => {\n    chartWrapper.removeColumn(index, this);\n  });\n}\n\nfunction onAfterRemoveRow(index) {\n  chartWrappers.forEach((chartWrapper) => {\n    chartWrapper.removeRow(index, this);\n  });\n}\n\nconst hot = new Handsontable(document.getElementById('root'), {\n  data: [\n    [120, 160, 80],\n    [130, 115, 95],\n    [150, 120, 60],\n  ],\n  colHeaders(index) {\n    return `Team ${index + 1}`;\n  },\n  rowHeaders(index) {\n    return `Game ${index + 1}`;\n  },\n  contextMenu: ['remove_row', 'remove_col'],\n  rowHeaderWidth: 100,\n  className: 'htCenter',\n  type: 'numeric',\n  width: 650,\n  maxRows: 5,\n  maxCols: 5,\n  stretchH: 'all',\n  allowInvalid: false,\n  afterInit: onAfterInit,\n  beforeChange: onBeforeChange,\n  afterCreateCol: onAfterCreateColumn,\n  afterCreateRow: onAfterCreateRow,\n  afterRemoveCol: onAfterRemoveColumn,\n  afterRemoveRow: onAfterRemoveRow,\n});\n\ncontrols.addEventListener('click', (event) => {\n  const isButton = event.target.nodeName.toLowerCase() === 'button';\n\n  if (isButton) {\n    const buttonValue = event.target.value;\n\n    if (buttonValue === 'addNewGame') {\n      const nextRow = hot.countRows() + 1;\n\n      if (nextRow <= hot.getSettings().maxRows) {\n        hot.alter('insert_row', nextRow);\n      }\n    }\n\n    if (buttonValue === 'addNewTeam') {\n      const nextColumn = hot.countCols() + 1;\n\n      if (nextColumn <= hot.getSettings().maxCols) {\n        hot.alter('insert_col', nextColumn);\n      }\n    }\n  }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./integrations/index.js","/**\n* A amChart data visualisation.\n*\n* Create amChart instance linked with data from Handsontable.\n*\n* @class AmChartsWrapper.\n*/\nclass AmChartsWrapper {\n/**\n* Create a AmChartsWrapper.\n* @param {string} amChartsRootId - element id.\n* @param {object} hotInstance - a reference to the Handsontable instance.\n*/\n  constructor(amChartsRootId, hotInstance) {\n    this.name = 'amCharts';\n    this.chart = AmCharts.makeChart(amChartsRootId,\n    AmChartsWrapper.getChartOptions(hotInstance));\n  }\n\n/**\n*\n* amChart options object.\n*\n* @returns {Object} amChart object configs.\n*/\n  static getChartOptions(hotInstance) {\n    return {\n      type: 'serial',\n      theme: 'light',\n      dataProvider: AmChartsWrapper.zipTeamWithGameData(hotInstance),\n      valueAxes: [{\n        gridColor: '#FFFFFF',\n        gridAlpha: 0.2,\n        dashLength: 0,\n      }],\n      gridAboveGraphs: true,\n      startDuration: 1,\n      graphs: AmChartsWrapper.updateChartGraphs(hotInstance),\n      chartCursor: {\n        categoryBalloonEnabled: false,\n        cursorAlpha: 0,\n        zoomable: false,\n      },\n      categoryField: 'team',\n      categoryAxis: {\n        gridPosition: 'start',\n        gridAlpha: 0,\n        tickPosition: 'start',\n        tickLength: 20,\n      },\n      export: {\n        enabled: true,\n      },\n    };\n  }\n\n/**\n* Helper function.\n*\n* Zip column header to the value of the column from Handsontable object settings.\n* amCharts data provider needs data array in form:\n*\n* @example\n* {\n*  \"name\": \"Team 1\",\n*  \"game1\": 144,\n*  \"game2\": 30,\n*  and so on\n* }\n*\n* @param {Object} Handsontable object.\n* @returns {Array} a merged key-value pair in array.\n*/\n  static zipTeamWithGameData(hotInstance) {\n    const colsArray = [];\n\n    for (let indexColumn = 0; indexColumn < hotInstance.countCols(); indexColumn += 1) {\n      const obj = {};\n\n      obj.team = hotInstance.getSettings().colHeaders(indexColumn);\n\n      hotInstance.getDataAtCol(indexColumn).map((item, index) => {\n        obj[hotInstance.getSettings().rowHeaders(index)] = item;\n\n        return obj;\n      });\n\n      colsArray.push(obj);\n    }\n\n    return colsArray;\n  }\n\n  /**\n* Helper function.\n*\n*\n*\n* @param {Object} Handsontable object.\n* @returns {Array} a merged key-value pair in array.\n*/\n  static updateChartGraphs(hotInstance) {\n    const graphs = [];\n\n    for (let indexRow = 0; indexRow < hotInstance.countRows(); indexRow += 1) {\n      const objectGraph = {};\n\n      objectGraph.fillAlphas = 0.8;\n      objectGraph.lineAlpha = 0.2;\n      objectGraph.type = 'column';\n      objectGraph.balloonText = `${hotInstance.getSettings().rowHeaders(indexRow)}: [[${hotInstance.getSettings().rowHeaders(indexRow)}]]`;\n      objectGraph.valueField = `${hotInstance.getSettings().rowHeaders(indexRow)}`;\n\n      graphs.push(objectGraph);\n    }\n\n    return graphs;\n  }\n\n  /**\n*\n* Create new row\n*\n* @param {Object} Handsontable object.\n* @param {Number} index index next row.\n*\n*/\n  addNewGame(hotInstance, index) {\n    const objectGraph = {\n      fillAlphas: 0.8,\n      lineAlpha: 0.2,\n      type: 'column',\n      balloonText: `${hotInstance.getSettings().rowHeaders(index)}: [[${hotInstance.getSettings().rowHeaders(index)}]]`,\n      valueField: `${hotInstance.getSettings().rowHeaders(index)}`,\n    };\n\n    this.chart.graphs.push(objectGraph);\n\n    for (let indexColumn = 0; indexColumn < hotInstance.countCols(); indexColumn += 1) {\n      this.chart.dataProvider[indexColumn][hotInstance.getSettings().rowHeaders(index)] = 0;\n    }\n\n    this.chart.validateNow(true);\n  }\n\n  /**\n*\n* Create new column\n*\n* @param {Object} Handsontable object.\n* @param {Number} index index next column.\n*\n*/\n  addNewTeam(hotInstance, index) {\n    const objectTeam = {\n      team: `Team ${index + 1}`,\n    };\n\n    for (let indexRow = 0; indexRow < hotInstance.countRows(); indexRow += 1) {\n      objectTeam[hotInstance.getSettings().rowHeaders(indexRow)] = 0;\n    }\n\n    this.chart.dataProvider.push(objectTeam);\n\n    this.chart.validateNow(true);\n  }\n\n /**\n*\n* Remove row\n*\n* @param {Number} index index remove row.\n* @param {Object} Handsontable object.\n*\n*/\n  removeRow(index, hotInstance) {\n    this.chart.graphs.splice(index, 1);\n\n    for (let indexRow = 0; indexRow < hotInstance.countRows(); indexRow += 1) {\n      for (let indexColumn = 0; indexColumn < hotInstance.countCols(); indexColumn += 1) {\n        this.chart.dataProvider[indexColumn][hotInstance.getSettings().rowHeaders(indexRow)] =\n        hotInstance.getDataAtCell(indexRow, indexColumn);\n      }\n\n      this.chart.graphs[indexRow].balloonText = `${hotInstance.getSettings().rowHeaders(indexRow)}: [[${hotInstance.getSettings().rowHeaders(indexRow)}]]`;\n      this.chart.graphs[indexRow].valueField = `${hotInstance.getSettings().rowHeaders(indexRow)}`;\n    }\n\n    this.chart.validateNow(true);\n  }\n\n  /**\n*\n* Remove column\n*\n* @param {Number} index index remove column.\n* @param {Object} Handsontable object.\n*\n*/\n  removeColumn(index, hotInstance) {\n    this.chart.dataProvider.splice(index, 1);\n\n    for (let indexColumn = 0; indexColumn < hotInstance.countCols(); indexColumn += 1) {\n      this.chart.dataProvider[indexColumn].team = hotInstance.getSettings().colHeaders(indexColumn);\n\n      for (let indexRow = 0; indexRow < hotInstance.countRows(); indexRow += 1) {\n        this.chart.graphs[indexRow].balloonText = `${hotInstance.getSettings().rowHeaders(indexRow)}: [[${hotInstance.getSettings().rowHeaders(indexRow)}]]`;\n        this.chart.graphs[indexRow].valueField = `${hotInstance.getSettings().rowHeaders(indexRow)}`;\n      }\n    }\n\n    this.chart.validateNow(true);\n  }\n\n/**\n*\n* Watches changes from Handsontable and updates it in the chart.\n*\n* @param {Number} column column index.\n* @param {Number} value column value.\n*\n*/\n  updateChartData(row, column, value, hotInstance) {\n    this.chart.dataProvider[column][hotInstance.getSettings().rowHeaders(row)] = value;\n\n    this.chart.validateNow(true);\n  }\n}\n\nexport default AmChartsWrapper;\n\n\n\n// WEBPACK FOOTER //\n// ./integrations/amCharts.js","/**\n* A ChartJs data visualisation.\n*\n* Create ChartJs instance linked with data from Handsontable.\n*\n* @class ChartJsWrapper.\n*/\nclass ChartJsWrapper {\n/**\n* Create a ChartJsWrapper.\n* @param {string} chartJsRootId - element id.\n* @param {object} hotInstance - a reference to the Handsontable instance.\n*/\n  constructor(chartJsRootId, hotInstance) {\n    this.name = 'ChartJs';\n    this.chart = new Chart(document.getElementById(chartJsRootId),\n    ChartJsWrapper.getChartOptions(hotInstance));\n  }\n\n/**\n*\n* ChartJs options object.\n*\n* @returns {Object} ChartJs object configs.\n*/\n  static getChartOptions(hotInstance) {\n    return {\n      type: 'bar',\n      data: {\n        labels: ChartJsWrapper.updateChartColumns(hotInstance),\n        datasets: ChartJsWrapper.zipTeamWithRowData(hotInstance),\n      },\n      options: {\n        legend: {\n          display: false,\n        },\n        title: {\n          display: true,\n          fontSize: 32,\n          fontStyle: 'normal',\n          text: 'Chart.js & Handsontable',\n        },\n        tooltips: {\n          titleFontSize: 21,\n          bodyFontSize: 18,\n        },\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true,\n              fontSize: 23,\n            },\n          }],\n          xAxes: [{\n            ticks: {\n              fontSize: 23,\n            },\n          }],\n        },\n      },\n    };\n  }\n\n  /**\n* Helper function.\n*\n* Zip column header to the value of the column from Handsontable object settings.\n* chart.js data provider needs data array in form:\n*\n* @example\n* {\n*  label: \"Game 1\",\n*  backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n*  data: [144, 12, 13]\n* }\n*\n* @param {Object} Handsontable object.\n* @returns {Array} a merged key-value pair in array.\n*/\n  static zipTeamWithRowData(hotInstance) {\n    const rowsArray = [];\n    const backgroundColors = ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)',\n      'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)'];\n\n    for (let indexRow = 0; indexRow < hotInstance.countRows(); indexRow += 1) {\n      const objectTeam = {};\n\n      objectTeam.label = hotInstance.getSettings().rowHeaders(indexRow);\n      objectTeam.backgroundColor = backgroundColors[indexRow];\n      objectTeam.data = hotInstance.getDataAtRow(indexRow);\n\n      rowsArray.push(objectTeam);\n    }\n\n    return rowsArray;\n  }\n\n  /**\n* Helper function.\n*\n* @param {Object} Handsontable object.\n* @returns {Array} merged key-value pair\n*/\n  static updateChartColumns(hotInstance) {\n    const categoriesArray = [];\n\n    for (let indexColumn = 0; indexColumn < hotInstance.countCols(); indexColumn += 1) {\n      categoriesArray.push(hotInstance.getSettings().colHeaders(indexColumn));\n    }\n\n    return categoriesArray;\n  }\n\n  /**\n*\n* Create new row\n*\n* @param {Object} Handsontable object.\n* @param {Number} index index next row.\n*\n*/\n  addNewGame(hotInstance, index) {\n    const backgroundColors = ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)',\n      'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)'];\n    const objectTeam = {};\n\n    objectTeam.label = hotInstance.getSettings().rowHeaders(index);\n    objectTeam.backgroundColor = backgroundColors[index];\n\n    objectTeam.data = hotInstance.getDataAtRow(index).map((item) => {\n      const objectGame = {};\n\n      objectGame.value = item;\n\n      return objectGame;\n    });\n\n    this.chart.data.datasets.push(objectTeam);\n\n    this.chart.update();\n  }\n\n  /**\n*\n* Create new column\n*\n* @param {Object} Handsontable object.\n* @param {Number} index index next column.\n*\n*/\n  addNewTeam(hotInstance, index) {\n    this.chart.data.labels.push(hotInstance.getSettings().colHeaders(index));\n\n    for (let indexDataset = 0; indexDataset < this.chart.data.datasets.length; indexDataset += 1) {\n      this.chart.data.datasets[indexDataset].data[index] = { value: null };\n    }\n\n    this.chart.update();\n  }\n\n  /**\n*\n* Remove row\n*\n* @param {Number} index index remove row.\n* @param {Object} Handsontable object.\n*\n*/\n  removeRow(index, hotInstance) {\n    this.chart.data.datasets.splice(index, 1);\n\n    for (let indexRow = 0; indexRow < hotInstance.countRows(); indexRow += 1) {\n      this.chart.data.datasets[indexRow].label = hotInstance.getSettings().rowHeaders(indexRow);\n    }\n\n    this.chart.update();\n  }\n\n  /**\n*\n* Remove column\n*\n* @param {Number} index index remove column.\n* @param {Object} Handsontable object.\n*\n*/\n  removeColumn(index, hotInstance) {\n    this.chart.data.labels.splice(index, 1);\n\n    for (let indexcolumn = 0; indexcolumn < hotInstance.countCols(); indexcolumn += 1) {\n      this.chart.data.labels[indexcolumn] = hotInstance.getSettings().colHeaders(indexcolumn);\n\n      for (let indexRow = 0; indexRow < hotInstance.countRows(); indexRow += 1) {\n        this.chart.data.datasets[indexRow].label = hotInstance.getSettings().rowHeaders(indexRow);\n        this.chart.data.datasets[indexRow].data[index] =\n          hotInstance.getDataAtCell(indexRow, indexcolumn);\n      }\n    }\n\n    this.chart.update();\n  }\n\n/**\n*\n* Watches changes from Handsontable and updates it in the chart.\n*\n* @param {Number} column column index.\n* @param {Number} value column value.\n*\n*/\n  updateChartData(row, column, value) {\n    this.chart.data.datasets[row].data[column] = value;\n    this.chart.update();\n  }\n}\n\nexport default ChartJsWrapper;\n\n\n\n// WEBPACK FOOTER //\n// ./integrations/chartJs.js","/**\n* A FusionCharts data visualisation.\n*\n* Create FusionCharts instance linked with data from Handsontable.\n*\n* @class FusionChartsWrapper.\n*/\nclass FusionChartsWrapper {\n/**\n* Create a FusionChartsWrapper.\n* @param {string} fusionChartsRootId - element id.\n* @param {object} hotInstance - a reference to the Handsontable instance.\n*/\n  constructor(fusionChartsRootId, hotInstance) {\n    this.name = 'fusioncharts';\n    this.chart = new FusionCharts(FusionChartsWrapper\n      .getChartOptions(fusionChartsRootId, hotInstance))\n    .render();\n  }\n\n/**\n*\n* FusionCharts options object.\n*\n* @returns {Object} FusionCharts object configs.\n*/\n  static getChartOptions(fusionChartsRootId, hotInstance) {\n    return {\n      id: 'fusionChart',\n      type: 'mscolumn2d',\n      renderAt: fusionChartsRootId,\n      width: 650,\n      height: 420,\n      dataFormat: 'json',\n      dataSource: {\n        chart: {\n          caption: 'FusionCharts & Handsontable',\n          xAxisName: 'Teams',\n          yAxisName: 'Values',\n        },\n        categories: [{ category: FusionChartsWrapper.updateChartColumns(hotInstance) }],\n        dataset: FusionChartsWrapper.zipTeamWithRowData(hotInstance),\n      },\n    };\n  }\n\n/**\n* Helper function.\n*\n* Zip column header to the value of the column from Handsontable object settings.\n* amCharts data provider needs data array in form:\n*\n* @example\n* {\n*  \"seriesname\": \"Game 1\",\n*  \"data\": [144, 12, 13]\n* }\n*\n* @param {Object} Handsontable object.\n* @returns {Array} a merged key-value pair in array.\n*/\n  static zipTeamWithRowData(hotInstance) {\n    const rowsArray = [];\n\n    for (let indexRow = 0; indexRow < hotInstance.countRows(); indexRow += 1) {\n      const objectGame = {};\n\n      objectGame.seriesname = hotInstance.getSettings().rowHeaders(indexRow);\n      objectGame.data = hotInstance.getDataAtRow(indexRow).map((item) => {\n        const objectResult = {};\n\n        objectResult.value = item;\n\n        return objectResult;\n      });\n\n      rowsArray.push(objectGame);\n    }\n\n    return rowsArray;\n  }\n\n  /**\n* Helper function.\n*\n*\n*\n* @param {Object} Handsontable object.\n* @returns {Array} a merged key-value pair in array.\n*/\n  static updateChartColumns(hotInstance) {\n    const category = [];\n\n    for (let indexColumn = 0; indexColumn < hotInstance.countCols(); indexColumn += 1) {\n      const objectTeam = {};\n\n      objectTeam.label = hotInstance.getSettings().colHeaders(indexColumn);\n\n      category.push(objectTeam);\n    }\n\n    return category;\n  }\n\n  /**\n*\n* Create new row\n*\n* @param {Object} Handsontable object.\n* @param {Number} index index next row.\n*\n*/\n  addNewGame(hotInstance, index) {\n    const objectTeam = {};\n\n    objectTeam.seriesname = hotInstance.getSettings().rowHeaders(index);\n    objectTeam.data = hotInstance.getDataAtRow(index).map((item) => {\n      const objectGame = {};\n\n      objectGame.value = item;\n\n      return objectGame;\n    });\n\n    this.chart.args.dataSource.dataset.push(objectTeam);\n\n    this.chart.setJSONData(this.chart.args.dataSource);\n  }\n\n  /**\n*\n* Create new column\n*\n* @param {Object} Handsontable object.\n* @param {Number} index index next column.\n*\n*/\n  addNewTeam(hotInstance, index) {\n    const objectTeam = {};\n    objectTeam.label = hotInstance.getSettings().colHeaders(index);\n\n    this.chart.args.dataSource.categories[0].category.push(objectTeam);\n\n    for (let indexDataset = 0; indexDataset < this.chart.args.dataSource.dataset.length;\n      indexDataset += 1) {\n      this.chart.args.dataSource.dataset[indexDataset].data[index] = { value: null };\n    }\n\n    this.chart.setJSONData(this.chart.args.dataSource);\n  }\n\n  /**\n*\n* Remove row\n*\n* @param {Number} index index remove row.\n* @param {Object} Handsontable object.\n*\n*/\n  removeRow(index, hotInstance) {\n    this.chart.args.dataSource.dataset.splice(index, 1);\n\n    for (let indexRow = 0; indexRow < hotInstance.countRows(); indexRow += 1) {\n      this.chart.args.dataSource.dataset[indexRow].seriesname =\n        hotInstance.getSettings().rowHeaders(indexRow);\n    }\n\n    this.chart.setJSONData(this.chart.args.dataSource);\n  }\n\n  /**\n*\n* Remove column\n*\n* @param {Number} index index remove column.\n* @param {Object} Handsontable object.\n*\n*/\n  removeColumn(index, hotInstance) {\n    this.chart.args.dataSource.categories[0].category.splice(index, 1);\n\n    for (let indexColumn = 0; indexColumn < hotInstance.countCols(); indexColumn += 1) {\n      this.chart.args.dataSource.categories[0].category[indexColumn].label =\n      hotInstance.getSettings().colHeaders(indexColumn);\n\n      for (let indexRow = 0; indexRow < hotInstance.countRows(); indexRow += 1) {\n        this.chart.args.dataSource.dataset[indexRow].seriesname =\n          hotInstance.getSettings().rowHeaders(indexRow);\n        this.chart.args.dataSource.dataset[indexRow].data[indexColumn].value =\n          hotInstance.getDataAtCell(indexRow, indexColumn);\n      }\n    }\n\n    this.chart.setJSONData(this.chart.args.dataSource);\n  }\n\n/**\n*\n* Watches changes from Handsontable and updates it in the chart.\n*\n* @param {Number} column column index.\n* @param {Number} value column value.\n*\n*/\n  updateChartData(row, column, value) {\n    this.chart.args.dataSource.dataset[row].data[column].value = value;\n\n    this.chart.setJSONData(this.chart.args.dataSource);\n  }\n}\n\nexport default FusionChartsWrapper;\n\n\n\n// WEBPACK FOOTER //\n// ./integrations/fusionCharts.js","/**\n* A Highcharts data visualisation.\n*\n* Create Highcharts instance linked with data from Handsontable.\n*\n* @class HighchartsWrapper.\n*/\nclass HighchartsWrapper {\n/**\n* Create a HighChartsWrapper.\n* @param {string} highChartsRootId - element id.\n* @param {object} hotInstance - a reference to the Handsontable instance.\n*/\n  constructor(highChartsRootId, hotInstance) {\n    this.name = 'highcharts';\n    this.chart = new Highcharts.Chart(document.getElementById(highChartsRootId),\n    HighchartsWrapper.getChartOptions(hotInstance));\n  }\n\n/**\n*\n* HighCharts options object.\n*\n* @returns {Object} HighCharts object configs.\n*/\n  static getChartOptions(hotInstance) {\n    return {\n      chart: {\n        type: 'column',\n        width: 650,\n      },\n      title: {\n        text: 'Highcharts & Handsontable',\n      },\n      xAxis: {\n        categories: HighchartsWrapper.updateChartColumns(hotInstance),\n      },\n      series: HighchartsWrapper.zipTeamWithRowData(hotInstance),\n    };\n  }\n\n  /**\n* Helper function.\n*\n* Zip column header to the value of the column from Handsontable object settings.\n* amCharts data provider needs data array in form:\n*\n* @example\n* {\n*  \"name\": \"Game 1\",\n*  \"data\": [144, 12, 13]\n* }\n*\n* @param {Object} Handsontable object.\n* @returns {Array} a merged key-value pair in array.\n*/\n  static zipTeamWithRowData(hotInstance) {\n    const rowsArray = [];\n\n    for (let indexRow = 0; indexRow < hotInstance.countRows(); indexRow += 1) {\n      const objectGame = {};\n\n      objectGame.name = hotInstance.getSettings().rowHeaders(indexRow);\n      objectGame.data = hotInstance.getDataAtRow(indexRow);\n\n      rowsArray.push(objectGame);\n    }\n\n    return rowsArray;\n  }\n\n  /**\n* Helper function.\n*\n*\n*\n* @param {Object} Handsontable object.\n* @returns {Array} a column headers in array.\n*/\n  static updateChartColumns(hotInstance) {\n    const categoriesArray = [];\n\n    for (let indexColumn = 0; indexColumn < hotInstance.countCols(); indexColumn += 1) {\n      categoriesArray.push(hotInstance.getSettings().colHeaders(indexColumn));\n    }\n\n    return categoriesArray;\n  }\n\n  /**\n*\n* Create new row\n*\n* @param {Object} Handsontable object.\n* @param {Number} index index next row.\n*\n*/\n  addNewGame(hotInstance, index) {\n    const objectGame = {};\n\n    objectGame.name = hotInstance.getSettings().rowHeaders(index);\n    objectGame.data = hotInstance.getDataAtRow(index);\n\n    this.chart.addSeries(objectGame);\n\n    this.chart.update(HighchartsWrapper.getChartOptions(hotInstance));\n  }\n\n  /**\n*\n* Create new column\n*\n* @param {Object} Handsontable object.\n* @param {Number} index index next column.\n*\n*/\n  addNewTeam(hotInstance, index) {\n    this.chart.xAxis[0].categories.push(hotInstance.getSettings().colHeaders(index));\n\n    for (let indexSeries = 0; indexSeries < this.chart.series.length; indexSeries += 1) {\n      this.chart.series[indexSeries].data[index] = hotInstance.getDataAtRow(index);\n    }\n\n    this.chart.update(HighchartsWrapper.getChartOptions(hotInstance));\n  }\n\n  /**\n*\n* Remove row\n*\n* @param {Number} index index remove row.\n* @param {Object} Handsontable object.\n*\n*/\n  removeRow(index, hotInstance) {\n    this.chart.series[index].remove();\n\n    this.chart.update(HighchartsWrapper.getChartOptions(hotInstance));\n  }\n\n  /**\n*\n* Remove column\n*\n* @param {Number} index index remove column.\n* @param {Object} Handsontable object.\n*\n*/\n  removeColumn(index, hotInstance) {\n    this.chart.xAxis[0].categories.splice(index, 1);\n\n    this.chart.update(HighchartsWrapper.getChartOptions(hotInstance));\n  }\n\n/**\n*\n* Watches changes from Handsontable and updates it in the chart.\n*\n* @param {Number} row row index.\n* @param {Number} column column index.\n* @param {Number} value column value.\n*\n*/\n  updateChartData(row, column, value) {\n    this.chart.series[row].data[column].update(value);\n  }\n}\n\nexport default HighchartsWrapper;\n\n\n\n// WEBPACK FOOTER //\n// ./integrations/highcharts.js"],"sourceRoot":""}