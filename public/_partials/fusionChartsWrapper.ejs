class FusionChartsWrapper {
  constructor(fusionChartsRootId, hotInstance) {
    this.name = 'fusioncharts';
    this.chart = new FusionCharts(FusionChartsWrapper
      .getChartOptions(fusionChartsRootId, hotInstance))
    .render();
  }

  static getChartOptions(fusionChartsRootId, hotInstance) {
    return {
      id: 'fusionChart',
      type: 'column2d',
      renderAt: fusionChartsRootId,
      width: 650,
      height: 420,
      dataFormat: 'json',
      dataSource: {
        chart: {
          caption: 'FusionCharts & Handsontable',
          xAxisName: 'Month',
          yAxisName: 'Values',
        },
        data: zipHeadersWithValues(
          hotInstance.getSettings().colHeaders, hotInstance.getDataAtRow(0), 'label'),
      },
    };
  }
  
  updateChartData(column, value) {
    this.chart.args.dataSource.data[column].value = value;

    this.chart.setJSONData(this.chart.args.dataSource);
  }
}

const chartWrappers = [];

function zipHeadersWithValues(columnHeaders, columnValues, key) {
  return columnHeaders.map((item, index) => {
    const obj = {};

    obj[key] = item;
    obj.value = columnValues[index];

    return obj;
  });
}

function onAfterInit() {
  chartWrappers.push(new FusionChartsWrapper('chart', this));
}

function onBeforeChange(changes) {
  changes.forEach((change) => {
    chartWrappers.forEach((chartWrapper) => {
      const [row, column] = change;
      const currentValue = change[3] === '' ? 0 : change[3];

      if (change[3] === '') {
        this.setDataAtCell(row, column, 0, 'onBeforeChange');
      }

      chartWrapper.updateChartData(column, currentValue);
    });
  });
}

document.addEventListener("DOMContentLoaded", function() {
  new Handsontable(document.getElementById('root'), {
    data: [
      [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4],
    ],
    colHeaders: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    rowHeaders: true,
    type: 'numeric',
    width: 650,
    maxRows: 1,
    stretchH: 'all',
    allowInvalid: false,
    afterInit: onAfterInit,
    beforeChange: onBeforeChange,
  });
});